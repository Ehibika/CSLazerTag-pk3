/* ================================================
 * This file holds all of the character specific data for your class, as
 * well as some shop related data for buying items and utility
 * the appropriate ACS file. 
 * 
 * many of the files below need to bare the name of the
 * class they are associated with in order to properly work.
 * =================================================*/


actor Blake : ClassBase
{
Player.displayname "Blake"
player.startitem "IsBlake"
player.startitem "BusterPower", 1000
player.startitem "SetupShop"
player.startitem "LoadShopInventory"

player.startitem "Blake_ClassSet"


states
{
Spawn:
HMEG A 0
HMEG B 1
HMEG A 1
Goto Spawn+2
See:
HMEG BCDE 5
Goto Spawn
Missile:
HMEG F 5
HMEG G 4
goto Spawn
}
}

Actor IsBlake : Once{}

/* ================================================
 * The Following constants dictate the maximum number of
 * "charges" one can have on each ability at any given time,
 * These constants are used for the shop item and a few scripts
 * =================================================*/
 
Const int Cap_BombSlide = 1;
Const int Cap_BombLay = 2;
Const int Cap_BlakeOut = 1;

/* ================================================
 * This constant is relevant for Signature abilities that
 * rely on kills to recharge, it determines how many kills
 * you need to gain a new charge on that round
 * =================================================*/
 
Const int Blake_SigKillCap = 2;

/* ================================================
 * The [Class]starterset is given to you the first
 * time you spawn into the game, typically this gives you
 * the Zapper and a single charge to your signature ability
 * =================================================*/
 
actor BlakeStarterSet : CustomInventory
{
states 
{
Pickup: 
TNT1 A 0 A_GiveInventory("Zapper",1)
TNT1 A 0 ACS_NamedExecuteAlways("GiveSignatureCharge",0,Cap_BombSlide)
TNT1 A 0
Done:
TNT1 A 0
stop
}
}

/* ================================================
 * The [Class]_Melee is what gives you your melee weapon, while
 * all classes use the same pool of guns, they can bring their
 * own melee weapon, though they can only differ in appearance
 * =================================================*/

actor Blake_Melee : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_GiveInventory("BlakeMelee",1)
TNT1 A 0
Done:
TNT1 A 0
stop
}
}

/* ================================================
 * The [Class}_ClassSet is given to the class every time 
 * they spawn and respawn, it contains necessary inventory
 * items and scripts they need to initialize everytime
 * this class comes into play. generally the following
 * are required:
 * 
 * Ability[1-3]_ChargeFlag : identifies that this ability
 * 		uses individual charges
 * Ability[1-3]_ResourceFlag : identifies that this ability
 * 		uses a gradual resource
 * AbilityChargeCap_[1-3] : Defines the max number of
 * 		Charges this ability is able to have
 * UseAbility[1-3]_[Class] : The name of the custominventories
 * 		That initiate that given ability when triggered.
 * SignatureKillRecharge : A flag that states this class
 * 		Recharges their signature ability through kills.
 * SignatureKillCap : Establishes how many kills are
 * 		needed to regain a new charge of your signature.
 * 
 * =================================================*/
 
actor Blake_ClassSet : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_GiveInventory("UseAbility1_Blake",1)
TNT1 A 0 A_GiveInventory("Ability1_ChargeFlag",1)
TNT1 A 0 A_GiveInventory("AbilityChargeCap_1",Cap_BombSlide)

TNT1 A 0 A_GiveInventory("SignatureKillRecharge",1)
TNT1 A 0 A_GiveInventory("SignatureKillCap",Blake_SigKillCap)
//==
TNT1 A 0 A_GiveInventory("UseAbility2_Blake",1)
TNT1 A 0 A_GiveInventory("Ability2_ChargeFlag",1)
TNT1 A 0 A_GiveInventory("AbilityChargeCap_2",Cap_BombLay)
//==
TNT1 A 0 A_GiveInventory("UseAbility3_Blake",1)
TNT1 A 0 A_GiveInventory("Ability3_ChargeFlag",1)
TNT1 A 0 A_GiveInventory("AbilityChargeCap_3",Cap_BlakeOut)
TNT1 A 0
Done:
TNT1 A 0
stop
}
}

//=========|Class Shop|============
/* ================================================
 * These are actors that handle the function of the
 * Class's specific shop for purchasing their abilities,
 * the [Class}_ClassShop supplies the function actors
 * needed to perform the purchase, and the Cost_[AbilityName]
 * constants are used to set the price of a given ability
 * in the shop.
 * =================================================*/
actor Blake_ClassShop : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_GiveInventory("BuyBlakeOut",1)
TNT1 A 0 A_GiveInventory("BuyBombLay",1)
TNT1 A 0 A_GiveInventory("BuyBlakeOut",1)
stop
}
}

Const int Cost_BombSlide = 150;
Const int Cost_BombLay = 250;
Const int Cost_BlakeOut = 350;

actor BuyBombSlide : BuyThing
{
states
{
Use1:
TNT1 A 0 A_JumpIf(CallACS("CashCheck",Cost_BombSlide),"Use2")
goto NoMoney
CostPay:
TNT1 A 0 ACS_NamedExecuteWithResult("CashPay",Cost_BombSlide)
goto BuySuccess
//===
Use2:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",Cap_BombSlide,"FullCapacity")
TNT1 A 0 A_GiveInventory("AbilityCharge_1",1)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)

goto CostPay
}
}

actor BuyBombLay : BuyThing
{
states
{ 
Use1:
TNT1 A 0 A_JumpIf(CallACS("CashCheck",Cost_BombLay),"Use2")
goto NoMoney
CostPay:
TNT1 A 0 ACS_NamedExecuteWithResult("CashPay",Cost_BombLay)
goto BuySuccess
//===
Use2:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_2",Cap_BombLay,"FullCapacity")
TNT1 A 0 A_GiveInventory("AbilityCharge_2",1)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)

goto CostPay
}
}

actor BuyBlakeOut : BuyThing
{
states
{
Use1:
TNT1 A 0 A_JumpIf(CallACS("CashCheck",Cost_BlakeOut),"Use2")
goto NoMoney
CostPay:
TNT1 A 0 ACS_NamedExecuteWithResult("CashPay",Cost_BlakeOut)
goto BuySuccess
//===
Use2:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_3",Cap_BlakeOut,"FullCapacity")
TNT1 A 0 A_GiveInventory("AbilityCharge_3",1)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)

goto CostPay
}
}