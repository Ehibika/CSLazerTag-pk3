actor ForceVisible : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_SetTranslucent(1.0,0)
TNT1 A 0 A_ChangeFlag("INVISIBLE",0)
TNT1 A 0 A_ChangeFlag("SHADOW",0)
stop
}
}

actor NetCheck_A : Powerup{powerup.duration 7}
actor NetCheck_B : Powerup{powerup.duration 7}
actor NetCheck_C : Powerup{powerup.duration 7}
actor NetCheck_D : Powerup{powerup.duration 7}
actor NetCheck_Freeze : Powerup{powerup.duration 7}
actor NetCheck_DD : Powerup{powerup.duration 3}

actor InMenu : Once{}
actor InRemoteMode : Once{}


actor PKMN_PlayerFreeze : Once{}
actor PKMN_PlayerFullFreeze : Once{}

actor WepMessageBuffer : Powerup{powerup.duration -4}
actor WepPickupBuffer : Powerup{powerup.duration 55}

//[+]========================================================================[+]
//------------------------------|SBar Resources|---------------------------
//[+]========================================================================[+]

actor AltAttackMove : Once{}
actor AltAttackMove2 : Powerup{powerup.duration 70}

//[+]========================================================================[+]
//------------------------------|Player Resources|---------------------------
//[+]========================================================================[+]

actor ShotCounter : Ammo
{
inventory.amount 1
inventory.maxamount 5
+INVENTORY.IGNORESKILL
}

//100.0%
actor BusterPower : Ammo
{
inventory.amount 1
inventory.maxamount 1000
+INVENTORY.IGNORESKILL
}

actor AntiBusterPower : Inventory
{
inventory.amount 1
inventory.maxamount 1000
}

actor SpecialResource : Inventory
{
inventory.amount 1
inventory.maxamount 100
}

actor ClassResource : Ammo
{
inventory.amount 1
inventory.maxamount 1000
}

actor AmmoDelay : Inventory
{
inventory.amount 1
inventory.maxamount 35
}

actor BloomCount : Inventory
{
inventory.amount 1
inventory.maxamount 100
}

actor AmmoStaller : Powerup{inventory.amount 1 powerup.duration 35}

actor ShotCount : BloomCount{}
actor RecoilRecover : Once{}
actor RRStaller : Powerup{inventory.amount 1 powerup.duration 7}



actor RecoilRecoverBase : BasicHelper 
{
Args 0
States
{
Spawn:
TNT1 A 0 
//TNT1 A 0 A_SetPitch(CallACS("CSLT_PitchGrab"))
TNT1 A 0 ACS_NamedExecuteWithResult("CSLT_PitchGrab2",0,0)
TNT1 A 0 //A_LogInt(pitch)
TNT1 A 0 A_SetArg(1,pitch) //Start Pitch
TNT1 A 0 A_SetArg(2,-1) //Zero Pass
Spawn.Loop:
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"DeathTake")
TNT1 A 1 
TNT1 A 0 A_JumpIfInTargetInventory("RRStaller",1,"Spawn.Loop")
TNT1 A 0 ACS_NamedExecuteWithResult("CSLT_PitchGrab2",0,0)
//TNT1 A 0 A_SetPitch(CallACS("CSLT_PitchGrab"))
TNT1 A 0 A_SetArg(0,pitch) // Current Pitch
TNT1 A 0 //A_LogInt(Args[0])
TNT1 A 0 A_GiveInventory("RecoilRecover_PitchFunc")
//TNT1 A 0 A_JumpIf(Args[0] > Args[1] && Args[0] < Args[2],"DeathTake")
//TNT1 A 0 A_JumpIf(Args[1] > 180 && Args[0] < Args[1],"DeathTake")
//TNT1 A 0 A_JumpIf(Args[1] <= 180 && Args[0] > Args[1],"DeathTake")
TNT1 A 1 A_JumpIfInTargetInventory("ShotCount",1,"Spawn.RR")
Goto Death

Spawn.RR: //Recoil Recover
TNT1 A 1 //Give Recoil Recover CustomInventory
Goto Spawn.Take

Spawn.Take:
TNT1 A 0 A_TakeFromTarget("ShotCount",1)
TNT1 A 1 A_JumpIfInTargetInventory("ShotCount",1,"Spawn.Loop")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("ShotCount",99)
TNT1 A 0 A_TakeFromTarget("RecoilRecover",99)
TNT1 A 0 A_GiveToTarget("RecoilRecover_SwayReset",1)
TNT1 A 0
stop
}
}

Const int Pitch_LowBound = 90;
Const int Pitch_HighBound = 270;

actor RecoilRecover_PitchFunc : CustomInventory
{
states
{
Pickup:
/*
Okay, so here's the deal, this custominventory serves to check if the pitch has
reached it's pitch goal on recover, if so, then it clears all the shotcounts
to end the downshift

Arg 0 = Current Pitch
Arg 1 = Starting Pitch
Arg 2 = Zero Pass Flag

*/
TNT1 A 0 A_JumpIf(Args[0] > 0 && Args[1] > 0  &&  Args[0] < Pitch_LowBound && Args[1] < Pitch_LowBound,"Normal")
TNT1 A 0 A_JumpIf(Args[0] < 360 && Args[1] < 360 && Args[0] > Pitch_HighBound && Args[1] > Pitch_HighBound,"Normal")
TNT1 A 0 A_JumpIf(Args[0] > 0 && Args[0] < Pitch_LowBound  &&  Args[1] < 360 && Args[1] > Pitch_HighBound,"Clearance")
Goto DoNothing

Normal: //Check if we reached our pitch goal
TNT1 A 0 A_JumpIf(Args[0] > Args[1],"Clearance")
stop

DoNothing: //nothing happens, continue with down shifting
TNT1 A 0
stop

Clearance:
TNT1 A 0 A_TakeFromTarget("ShotCount",99)
stop
}
}

actor RecoilRecover_SwayReset : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("Clear_LeftRightDeviation",0)
stop
}
}

actor UseResource : Once{}
actor HasUltimate : Once{}

actor NoClipBar : Once{}
actor AbilityActiveFlag : Once{}
actor AbilitySwapFlag : Once{}

actor RemoCon_Up : Once{}
actor RemoCon_Down : Once{}
actor RemoCon_Left : Once{}
actor RemoCon_Right : Once{}
actor RemoCon_Confirm : Once{}
actor RemoCon_Cancel : Once{}



actor AbilityResource_1 : Ammo{inventory.amount 1 inventory.maxamount 500}
actor AbilityResource_2 : Ammo{inventory.amount 1 inventory.maxamount 500}
actor AbilityResource_3 : Ammo{inventory.amount 1 inventory.maxamount 500}

actor AbilityCharge_1 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityCharge_2 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityCharge_3 : Ammo{inventory.amount 1 inventory.maxamount 5}

actor AbilityChargeCap_1 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityChargeCap_2 : Ammo{inventory.amount 1 inventory.maxamount 5}
actor AbilityChargeCap_3 : Ammo{inventory.amount 1 inventory.maxamount 5}

actor Ability1_ChargeFlag : Once{}
actor Ability2_ChargeFlag : Once{}
actor Ability3_ChargeFlag : Once{}

actor Ability1_ResourceFlag : Once{}
actor Ability2_ResourceFlag : Once{}
actor Ability3_ResourceFlag : Once{}

actor UltimateCharge : Inventory{inventory.amount 1 inventory.maxamount 10}
actor UltimateChargeCap : Inventory{inventory.amount 1 inventory.maxamount 10}


actor CSLT_TakeAbilities : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_TakeInventory("AbilityResource_1",999)
TNT1 A 0 A_TakeInventory("AbilityResource_2",999)
TNT1 A 0 A_TakeInventory("AbilityResource_3",999)
TNT1 A 0 A_TakeInventory("AbilityCharge_1",9)
TNT1 A 0 A_TakeInventory("AbilityCharge_2",9)
TNT1 A 0 A_TakeInventory("AbilityCharge_3",9)
stop
}
}

actor StockAbilities : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("StockAbilities",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor STK : StockAbilities{}

actor GiveUltimateCharge : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("GiveUltimateCharge",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor StockUltimateCharge : CustomInventory
{
states
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("StockUltimateCharge",0)
TNT1 A 0 ACS_NamedExecuteAlways("Write_Inventory",0)
stop
}
}

actor ULT : StockUltimateCharge{}



actor SignatureKillRecharge : Once{}
actor SignatureKillCount : Inventory{inventory.amount 1 inventory.maxamount 3}
actor SignatureKillCap : Inventory{inventory.amount 1 inventory.maxamount 3}

actor SignatureKillCounter : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("SignatureKillRecharge",1,"Pickup2")
TNT1 A 0
stop
Pickup2:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Nope")
TNT1 A 0 A_GiveInventory("SignatureKillCount",1)
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityKillQuota",1) == 1,"Recharge")
stop
Recharge:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Nope")
TNT1 A 0 A_GiveInventory("AbilityCharge_1",1)
TNT1 A 0 A_TakeInventory("SignatureKillCount",9)
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureTimer : Inventory
{inventory.amount 1 inventory.maxamount 60}

actor SignatureRecharging : Once{}
actor SigRoundEndCue : Powerup{inventory.amount 1 powerup.duration 35}


actor SignatureRecharger : BasicHelper 
{
//Arguments
// 1 = Time before Recharge
// 2 = 0 will only give 1 charge, 1 will continue till at max charges
Args 30,0
Var int user_Ticks;
States
{
Spawn: //Initiate Recharge
TNT1 A 0
TNT1 A 0 A_GiveToTarget("SignatureTimer",args[0])
TNT1 A 1 A_GiveToTarget("SignatureRecharging",1)
Goto Spawn.TimeDown

Spawn.Reinitialize: //ReInitiate Recharge
TNT1 A 1 A_GiveToTarget("SignatureTimer",args[0])
Goto Spawn.TimeDown

Spawn.TimeDown:
TNT1 A 0 A_JumpIfInTargetInventory("IsDead",1,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"Death")
TNT1 A 0 A_JumpIfInTargetInventory("SigRoundEndCue",1,"Death")
TNT1 A 1 A_SetUserVar("user_Ticks",user_Ticks+1)
TNT1 A 0 A_JumpIf(user_Ticks >=35,"Spawn.TickDown")
loop

Spawn.TickDown:
TNT1 A 0 A_TakeFromTarget("SignatureTimer",1)
TNT1 A 0 A_SetUserVar("user_Ticks",0)
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Death") // Just in case
TNT1 A 0 A_JumpIfInTargetInventory("SignatureTimer",1,"Spawn.TimeDown")
Goto Spawn.Recharge

Spawn.Recharge:
TNT1 A 1 A_GiveToTarget("AbilityCharge_1",1)
TNT1 A 0 A_JumpIf(args[1] >=1,"Spawn.Recharge2")
goto Death

Spawn.Recharge2:
TNT1 A 0 A_JumpIf(CallACS("CheckAbilityCap",1) == 1,"Death")
Goto Spawn

Death:
TNT1 A 0 A_TakeFromTarget("SignatureRecharging",9)
TNT1 A 0 A_TakeFromTarget("SignatureTimer",99)
TNT1 A 1 
stop
}
}

actor SignatureFullRecharger : SignatureRecharger {Args 30,1}

actor SignatureRecharge : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger")
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureFullRecharge : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureFullRecharger")
stop

Nope:
TNT1 A 0
stop
}
}

actor SignatureRecharger_25 : SignatureRecharger {Args 25,0}

actor SignatureRecharge_25 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_25")
stop
}
}

actor SignatureRecharger_20 : SignatureRecharger {Args 20,0}

actor SignatureRecharge_20 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_20")
stop
}
}

actor SignatureRecharger_15 : SignatureRecharger {Args 15,0}

actor SignatureRecharge_15 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_15")
stop
}
}

actor SignatureRecharger_35 : SignatureRecharger {Args 35,0}

actor SignatureRecharge_35 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_35")
stop
}
}

actor SignatureRecharger_40 : SignatureRecharger {Args 40,0}

actor SignatureRecharge_40 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_40")
stop
}
}

actor SignatureRecharger_45 : SignatureRecharger {Args 45,0}

actor SignatureRecharge_45 : SignatureRecharge
{
states
{
pickup:
TNT1 A 0 A_JumpIfInventory("AbilityCharge_1",1,"Nope")
TNT1 A 0 A_JumpIfInventory("SignatureRecharging",1,"Nope")
TNT1 A 0 A_SpawnItemEX("SignatureRecharger_45")
stop
}
}

//[+]========================================================================[+]
//--------------------------------|Ultimates Script|---------------------------
//[+]========================================================================[+]

actor LevelupFX : BasicClientside
{
scale 2.5 
Alpha 1.0
States 
{
Spawn: 
TNT1 A 0 
HGEN MNMN 3
TNT1 A 0 A_stop
HGEN MNMN 3 
HGEN MNMNMNMN 3 A_Fadeout
stop
}
}

Actor LeveLUpCue : CustomInventory
{
+COUNTITEM
+INVBAR
+INVENTORY.AUTOACTIVATE
+INVENTORY.QUIET
Inventory.Amount 1
Inventory.MaxAmount 1
inventory.icon "DWRASI"
Inventory.PickUpSound "item/1up"
Scale 2.0
States
{
Spawn:
WEAP Q 1
Loop
Use:
TNT1 A 0 A_spawnitemEX("LevelupFX",0,0,40,0,0,3,0,1)
TNT1 A 0 A_PlaySoundEX("Misc/Levelup","Soundslot9")
TNT1 A 0 A_GiveInventory("LevelupBuffer")
stop
}
}

Actor LevelupBuffer : Powerup{inventory.amount 1 powerup.duration 7}

//[+]========================================================================[+]

actor IsInGame : Once {}

actor OnceC : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor AbnormalItemPosition : Once {}

actor InvisibleFlag : Once {}
actor CannotUseHealing : Once {}
Actor JumpCanclerDisable : Once {}
Actor StaminaFlag : Ammo {+INVENTORY.IGNORESKILL Inventory.MaxAmount 500}
actor CanWallJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor NoJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor NoWallJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}
actor WallJump : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor WallJumpCount : Inventory
{
inventory.amount 1
inventory.maxamount 30
}

Actor NoArmorBar : Inventory
{
inventory.amount 1
inventory.maxamount 1
}


Actor ScriptCharge : Inventory
{
inventory.amount 1
inventory.maxamount 1000
}

Actor ClassToggleItem : Inventory
{
inventory.amount 1
inventory.maxamount 100
}
//[+]========================================================================[+]
//--------------------------------|Zangief Script|---------------------------
//[+]========================================================================[+]
actor SuplexID : Inventory
{
inventory.amount 1
inventory.maxamount 64
}
actor ZangiefAngle : Inventory
{
inventory.amount 1
inventory.maxamount 255
}

actor AntiInvincible : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_JumpIf(Health>0,"InGame")
stop
InGame:
TNT1 A 0 A_ChangeFlag("INVULNERABLE",0)
TNT1 A 0 A_ChangeFlag("SHOOTABLE",1)
stop
}
}

Actor GrappledFlag : Powerup{inventory.amount 1 powerup.duration 7}

actor GrappleGuard : BasePowerPro 
{
    -PICKUP
    inventory.amount 1 
    Powerup.Duration 17
    DamageFactor "SkyDrop1", 0.0
    DamageFactor "SeismicToss1", 0.0
    DamageFactor "VitalThrow1", 0.0
    DamageFactor "StormThrow1", 0.0
    DamageFactor "Submission1", 0.0
    DamageFactor "SuperPower1", 0.0
    DamageFactor "Megahorn", 0.0
}

//[+]========================================================================[+]
//--------------------------------|Targeting Script|---------------------------
//[+]========================================================================[+]
actor TargetingFlag : Inventory{inventory.amount 1 inventory.maxamount 64}
actor TargetingRangeFlag : Inventory{inventory.amount 1 inventory.maxamount 3000}
Actor TargActive : Powerup{inventory.amount 1 powerup.duration 0x7FFFFFFF}
Actor TargScriptActive : Powerup{inventory.amount 1 powerup.duration 3}
Actor TargHolder : Powerup{inventory.amount 1 powerup.duration 7}

actor WepScanFlag : once{}
Actor NoTargFlag : Powerup{inventory.amount 1 powerup.duration 7}

//[+]========================================================================[+]

actor ProjectilePortDead : Powerup{powerup.duration 17}
/*
actor HaltPlayer : CustomInventory //Interrupts movement states
{
states
{
pickup:
TNT1 A 0 A_GiveInventory("ProjectilePortDead",1)
TNT1 A 0 A_GiveInventory("DashBreaker",1)
stop
}
}


actor DashSet_A : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("SleepMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("FreezeMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("CringeMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_FREEZE,FREEZE_DASH)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSet_B : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("SleepMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("FreezeMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("CringeMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_FULLFREEZE,FREEZE_DASH)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSet_C : CustomInventory 
{
states
{
pickup:
TNT1 A 0 A_Jumpifinventory("SleepMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("FreezeMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("CringeMark",1,"Nope")
Goto Pickup2

Pickup2:
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_FREEZE,FREEZE_DASH)
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_JumpToggle",0,0)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashSetOff : CustomInventory 
{
states
{
pickup:
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_FreezePlayer",0,PLAYER_UNFREEZE,FREEZE_DASH)
TNT1 A 0 A_Jumpifinventory("ParalysisMark",1,2)
TNT1 A 0 ACS_NamedExecuteAlways("PKMN_JumpToggle",0,1)
TNT1 A 0

TNT1 A 0 A_Jumpifinventory("SleepMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("FreezeMark",1,"Nope")
TNT1 A 0 A_Jumpifinventory("CringeMark",1,"Nope")
TNT1 A 0 A_Jump(256,"Pickup2")
Goto Pickup2

Pickup2:
TNT1 A 0 A_SpawnItemEX("DashOffSafety")
stop

Nope:
TNT1 A 0 
Stop
}
}

actor DashOffSafety : BasicHelper 
{
States
{
Spawn:
TNT1 A 0
TNT1 A 5 
TNT1 A 0 A_GiveToTarget("DashSetOff2")
stop

Nope:
TNT1 A 0
stop
}
}

actor DashSetOff2 : DashSetOff 
{
states
{
Pickup2:
TNT1 A 0 //SetPlayerProperty(0,0,4)
stop
}
}
*/
actor RemoteMoveLock : CustomInventory 
{
states
{
pickup:
TNT1 A 0 ACS_NamedExecuteAlways("core_stopplayer",0,0,1)
stop

Nope:
TNT1 A 0 
Stop
}
}

actor RemoteMoveUnLock : CustomInventory 
{
states
{
pickup:
TNT1 A 0 ACS_NamedExecuteAlways("core_stopplayer",0,0,0)
TNT1 A 0 //ACS_NamedExecuteAlways("CSLT_JumpToggle",0,1)
TNT1 A 0 A_Jump(256,"Pickup2")
Goto Pickup2

Pickup2:
TNT1 A 0 //A_SpawnItemEX("DashOffSafety")
stop

Nope:
TNT1 A 0 
Stop
}
}

actor RemoteKiller : Powerup {inventory.amount 1 Powerup.Duration 5}

actor DeclineSoundCue : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 1 ACS_Execute(979,0)
stop
}
}

actor IsInvunFlag : OnceC{}


actor InvulnerableOn_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_GiveInventory("IsInvunFlag",1)
TNT1 A 0 A_ChangeFlag("INVULNERABLE",1)
stop
}
}
actor InvulnerableOff_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_TakeInventory("IsInvunFlag",9)
TNT1 A 0 A_ChangeFlag("INVULNERABLE",0)
stop
}
}

actor UnhittableOn_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_GiveInventory("IsInvunFlag",1)
TNT1 A 0 A_GiveInventory("UnhittableProtect",1)
TNT1 A 0 A_ChangeFlag("NONSHOOTABLE",1)
TNT1 A 0 A_ChangeFlag("NORADIUSDMG",1)
stop
}
}
actor UnhittableOff_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_TakeInventory("IsInvunFlag",9)
TNT1 A 0 A_TakeInventory("UnhittableProtect",9)
TNT1 A 0 A_ChangeFlag("NONSHOOTABLE",0)
TNT1 A 0 A_ChangeFlag("NORADIUSDMG",0)
stop
}
}
actor UnhittableProtect : PowerProtection
{
Powerup.Duration -60
//damagefactor "InsertRailGunHere", 0.0
}



actor IsReflective : OnceC{}


actor ReflectiveOn_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_GiveInventory("IsReflective",1)
TNT1 A 0 A_ChangeFlag("REFLECTIVE",1)
TNT1 A 0 A_ChangeFlag("DEFLECT",1)
stop
}
}
actor ReflectiveOff_Pickup : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_TakeInventory("IsReflective",9)
TNT1 A 0 A_ChangeFlag("REFLECTIVE",0)
TNT1 A 0 A_ChangeFlag("DEFLECT",0)
stop
}
}

actor 3PCam_On : CustomInventory
{
States
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("ClientCameraToggle",0,1)
stop
}
}
actor 3PCam_Off : CustomInventory
{
States
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("ClientCameraToggle",0,0)

stop
}
}


actor PlayerVisionHide_On : CustomInventory
{
States
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("HidePlayersFromView",0,1)
stop
}
}
actor PlayerVisionHide_Off : CustomInventory
{
States
{
Pickup:
TNT1 A 0 ACS_NamedExecuteAlways("HidePlayersFromView",0,0)

stop
}
}


actor PitchGrab : CustomInventory
{
States
{
Pickup:
TNT1 A 0 ACS_NamedExecuteWithResult("CSLT_PitchGrab2",0,0)

stop
}
}
//[+]========================================================================[+]
//-------------------------|Projectile TRanslation Script|---------------------
//[+]========================================================================[+]
actor ProjectileCode : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_GiveInventory("ProjectileSpawned",1)
Pickup1:
TNT1 A 0 A_JumpIf(CallACS("Check_ProjectileColor_Server"),"Pickup2")
stop
Pickup2:
TNT1 A 0 A_Jumpifintargetinventory("LightTeamFlag",1,"TeamBlue")
TNT1 A 0 A_Jumpifintargetinventory("WilyTeamFlag",1,"TeamRed")
TNT1 A 0 A_Jumpifintargetinventory("CossackTeamFlag",1,"TeamGreen")
TNT1 A 0 A_Jumpifintargetinventory("KingTeamFlag",1,"TeamGold")
stop
TeamBlue:
TeamBlue1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",0)
stop
TeamRed:
TeamRed1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",1)
stop
TeamGreen:
TeamGreen1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",2)
stop
TeamGold:
TeamGold1:
TNT1 A 0 ACS_NamedExecuteWithResult("Set_Projectile_Translation",3)
stop
}
}

actor ProjectileSpawned : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor ProjectileDCode : ProjectileCode
{
states
{
Pickup:
TNT1 A 0 A_Jumpifinventory("ProjectileSpawned",1,"PickupNo")
goto Pickup1
PickupNo:
TNT1 A 0
stop
}
}

actor ProjectileCodeNo : CustomInventory
{
states
{
Pickup:
TNT1 A 0
stop
}
}

actor SyncTarget : ProjectileCode
{
states
{
Pickup:
TNT1 A 0
goto Pickup1
TeamBlue:
TeamRed:
TeamGreen:
TeamGold:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
stop
}
}

actor ProjectileCodeSyncTarget : ProjectileCode
{
states
{
TeamBlue:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamBlue1
TeamRed:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamRed1
TeamGreen:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamGreen1
TeamGold:
TNT1 A 0 ACS_NamedExecuteWithResult("SyncTargetToTID",CallACS("Core_GetTarget"))
goto TeamGold1
}
}

actor ProjectileFXCode : ProjectileCode {}


//[+]========================================================================[+]
//-------------------------|Actor Alpha Synch Script|---------------------
//[+]========================================================================[+]

actor AlphaSynchToPlayer : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIf(CallACS("ClientsideAlpha"),"Pickup2")
stop
Pickup2:
TNT1 A 0 
stop
}
}


//[+]========================================================================[+]
//-------------------------|Persistant Loadouts|---------------------
//[+]========================================================================[+]

actor SaveMovesetFlag : Inventory{inventory.amount 1 inventory.maxamount 5}

actor PersistentLoadout : CustomInventory
{
States
{
Pickup:
TNT1 A 0 A_JumpIf(CallACS("INSTAGIB_CHECK"),"PickupNo")
TNT1 A 0 A_GiveInventory("Once",1)
TNT1 A 0 ACS_NamedExecuteAlways("PERSISTENT_LOADOUT",0)
stop
PickupNo:
TNT1 A 0
stop
}
}

actor PickupOn : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_ChangeFlag("PICKUP",1)
stop
}
}

actor PickupOff : CustomInventory
{
states
{
pickup:
TNT1 A 0 A_ChangeFlag("PICKUP",0)
stop
}
}

actor BasicWarperHold : Powerup {inventory.amount 1 Powerup.Duration 17}


actor PlayerIsInvisible : PlayerPropertyFrozen {}


actor PlayerVisibilityOff : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("INVISIBLE",1)
TNT1 A 0 A_SetTranslucent(0.0,0)
stop
}
}

actor PlayerVisibilityOn : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("INVISIBLE",0)
TNT1 A 0 A_SetTranslucent(1.0,0)
stop
}
}

Actor TargetMarker3 : TargetMarker
{
states
{
Use:
//TNT1 A 0 A_FireCustomMissile("TargetTracer",0,0,0,16,0,0)
TNT1 A 0 A_SpawnItemEx("TargetTracer3", 0, 8, 32, Cos(pitch)*1000, 0, sin(-pitch)*1000,0)
stop
}
}

actor TargetTracer3 : TargetTracer
{
+NOCLIP
+NOINTERACTION
}


actor XRayFlag : Inventory
{
inventory.amount 1
inventory.maxamount 1
}

actor XRayMarker
{
Height 0
Radius 0
+NOINTERACTION
+NOCLIP
PROJECTILE
scale 0.625
RenderStyle "Translucent"
//Alpha 0.0625
Alpha 0.0825
+CLIENTSIDEONLY
+FORCEXYBILLBOARD
states
{
Spawn:
DLOK A 0
DLOK A 1
stop
}
}

actor XRayTagFlag : Powerup {inventory.amount 1 Powerup.Duration 35}

actor XRayTagItem : PowerupGiver
{
+INVENTORY.AUTOACTIVATE
Powerup.Duration -6
powerup.type "XRayTagFlag"
}




actor FootStepPickup : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_PlaySoundEx("weapon/footstep","Voice")
PickupPrint:
TNT1 A 0 A_JumpIfInventory("LeftFoot",1,"Left")
TNT1 A 0 A_GiveInventory("LeftFoot",1)
Right:
TNT1 A 0 A_SpawnItemEx("FootStepJ",0,8,0)
stop
Left:
TNT1 A 0 A_TakeInventory("LeftFoot",1)
TNT1 A 0 A_SpawnItemEx("FootStepJ",0,-8,0)
stop
}
}


actor LeftFoot : Inventory
{
Inventory.Amount 1
Inventory.MaxAmount 1
}

actor CloakDaggerBar : Inventory
{
Inventory.Amount 1
Inventory.MaxAmount 100
}

actor FootStepJ
{
//+FLOORHUGGER
+NOGRAVITY
+CLIENTSIDEONLY
damage 0
radius 10
Speed 0
scale 2.5
+FORCEXYBILLBOARD
+DONTSPLASH
translation "176:176=28:28"
States
{
Spawn:
FTST F 0
FTST F 1
Spawn2:
FTST F 1 A_FadeOut(0.066)
loop
Death:
FTST F 1
stop
}
}

actor FootStep
{
+FLOORHUGGER
damage 0
radius 10
Speed 0
scale 2.5
+FORCEXYBILLBOARD
+DONTSPLASH
deathsound "weapon/footstep"
States
{
Spawn:
FTST A 1 A_PlaySoundEx("weapon/footstep","Voice")
FTST A 0 A_JumpIfInTargetInventory("WireFrame",1,"Spawn2")
FTST A 1 A_FadeOut(0.1)
goto Spawn+1
Death:
FTST A 1
stop
Spawn2:
FTST B 1 A_FadeOut(0.1)
loop
}
}

actor Wireframe : Inventory
{
Inventory.Amount 1
Inventory.MaxAmount 1
}


actor HushStep : Powerup{inventory.amount 1 powerup.duration 35}
