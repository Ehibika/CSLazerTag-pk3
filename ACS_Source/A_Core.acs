#library "A_Core"
#include "zcommon.acs"
#include "8bdmlib.acs"

#LIBDEFINE MAX_PLAYERS 64
#LIBDEFINE TEAM_NONE -1
#LIBDEFINE TEAM_COOP -2

#LIBDEFINE XRAYActorTID 580000

#LIBDEFINE BARRIERTID 390000 // 37| Owner TID

#LIBDEFINE DROPITEMTID 4540
#LIBDEFINE ZDMETER 32 //a meter is 32 map units
Function bool CheckActorTeam(int TID)
{
	if(ClassifyActor(TID) & ACTOR_PLAYER) {return GetPlayerInfo(TID-1000, PLAYERINFO_TEAM);}

	if(ClassifyActor(TID) & ACTOR_MONSTER)
		{
			if(CheckActorInventory(TID,"LightTeamFlag")) {Return 0;}
			if(CheckActorInventory(TID,"WilyTeamFlag")) {Return 1;}
			if(CheckActorInventory(TID,"CossackTeamFlag")) {Return 2;}
			if(CheckActorInventory(TID,"KingTeamFlag")) {Return 3;}
		}

		return -1;
}

Function bool GetMaxEntities(void)
{
	int ret = GetCVAR("sv_MaxClients");
	
	if(PlayerCount()>ret) // admins can join above the max player limit.
	{
		ret = PlayerCount();
	}

	int output = ret+GetCvar("Sv_MaxEntities");
	return output;
}

Function int NoNeg (int Numb)
{
Int Output;

if(Numb > 0){Output = Numb;}
else{Output = 0;}
return Output;
}



Function int CSLTButtonCheck (int NewButtons, int OldButtons, int Which)
{
	int ButtonNow = NewButtons & Which;
	int ButtonOld = OldButtons & Which;
	If(ButtonNow > ButtonOld){Return 1;}
	If(ButtonNow < ButtonOld){Return 2;}
	If(ButtonNow > 0 &&  ButtonOld > 0){Return 3;}
	Return 0;
}


function bool PressingButton (int theButton)
{
return PressingButton2(GetPlayerInput(-1, INPUT_BUTTONS),theButton);
}

function bool PressingButton2 (int buttons, int theButton)
{
return ((buttons&theButton)>0);
}

Function int ButtonCheck (int Buttons, int OldButtons, int WhichButton)
{
int ButtonNow = Buttons & WhichButton;
int ButtonOld = OldButtons & WhichButton;
If(ButtonNow > ButtonOld){Return 1;}
If(ButtonNow < ButtonOld){Return 2;}
If(ButtonNow > 0 &&  ButtonOld > 0){Return 3;}
Return 0;
}

Function bool isKBProof (void)
{
	if(CheckInventory("STF_Curse")) return true;
	if(CheckInventory("STF_IronDefense")) return true;
	if(CheckInventory("STF_Amnesia")) return true;
	if(CheckInventory("STF_CosmicPower")) return true;
	if(CheckInventory("STF_Defensecurl")) return true;
	//if(CheckInventory("SafeguardPower")) return true;
	//if(CheckInventory("CraftyShieldPower")) return true;
return false;
}

Function bool isTID_KBProof (int TID)
{
	if(CheckActorInventory(TID,"STF_Curse")) return true;
	if(CheckActorInventory(TID,"STF_IronDefense")) return true;
	if(CheckActorInventory(TID,"STF_Amnesia")) return true;
	if(CheckActorInventory(TID,"STF_CosmicPower")) return true;
	if(CheckActorInventory(TID,"STF_Defensecurl")) return true;
	//if(CheckActorInventory(TID,"SafeguardPower")) return true;
	//if(CheckActorInventory(TID,"CraftyShieldPower")) return true;
return false;
}

Function Int ValueMap (int Input, int InputHigh, int InputLow, int OutputHigh, int OutputLow)
{

int FinalOut;
int A;
int B;
Int C;

int AB;
int ABC;

A = (Input - InputLow)<<16;
B = (InputHigh - InputLow)<<16;
C = (OutputHigh - OutputLow);

AB = fixedDiv(A,B);
ABC = (AB * C) >> 16;
FinalOut = ABC + OutputLow;
//FinalOut = ( ((Input - InputLow)/(InputHigh - InputLow))*(OutputHigh - OutputLow) + OutputLow);

return FinalOut;
}



#DEFINE CHATLINE_NONE -1

function void SetNoSaveCvarInt(str cvar, int value)
{
ConsoleCommand(StrParam(s:"set ",s:cvar,s:" ",i:value));
}

function void SetNoSaveCvarString(str cvar, str value)
{
ConsoleCommand(StrParam(s:"set ",s:cvar,s:" \"",s:value,s:"\""));
}

function void DefineClassChatlines(str character, int roundStart, int clutch, int clutchCommend, int losing, int winning, int comeback){
	SetNoSaveCvarString("cslt_clt_character", character);
	SetNoSaveCvarInt("cslt_clt_roundstart", roundStart);
	SetNoSaveCvarInt("cslt_clt_clutch", clutch);
	SetNoSaveCvarInt("cslt_clt_clutchcommend", clutchCommend);
	SetNoSaveCvarInt("cslt_clt_losing", losing);
	SetNoSaveCvarInt("cslt_clt_winning", winning);
	SetNoSaveCvarInt("cslt_clt_comeback", comeback);
    ACS_NamedExecuteWithResult("CreateCharacterChatLineLimits_S");
}

function void adjustInventory(str item, int amount)
{
int currentAmount = CheckInventory(item);
if(amount>currentAmount) {
	GiveInventory(item,amount-currentAmount);
} else if(amount<currentAmount) {
	TakeInventory(item,currentAmount-amount);
}
}

Function int AToI (str s)
{
   str a = "";
   int i, i2, n;
   int l = StrLen(s);
   for (i = 0; i < l; i++)
   {
      for (i2 = 0; i2 < 10; i2++)
      {
         a = StrParam(i:i2);
         if (!StrCmpZan(StrParam(c:GetChar(s, i)), a))
            n += i2 * Power(10, l - i - 1);
      }
   }
   return n;
}

Function str ToLower (str s)
{
   int l = StrLen(s);
   int aChar = GetChar("A", 0);
   int zChar = GetChar("Z", 0);
   int sChar;
   str rs = "";
   for (int i = 0; i < l; i++)
   {
      sChar = GetChar(s, i);
      if (sChar <= zChar && sChar >= aChar)
         sChar += 32;
      rs = StrParam(s:rs, c:sChar);
   }
   return rs;
}

Function str ToUpper (str s)
{
   int l = StrLen(s);
   int aChar = GetChar("a", 0);
   int zChar = GetChar("z", 0);
   int sChar;
   str rs = "";
   for (int i = 0; i < l; i++)
   {
      sChar = GetChar(s, i);
      if (sChar <= zChar && sChar >= aChar)
         sChar -= 32;
      rs = StrParam(s:rs, c:sChar);
   }
   return rs;
}

Function bool StrCmpZan (str s1, str s2)
{
   int c1 = GetChar(s1, 0);
   int c2 = GetChar(s2, 0);
   if (c1 == c2)
      return false;
   return true;
}

Function bool StrICmpZan (str s1, str s2)
{
   s1 = ToLower(s1);
   s2 = ToLower(s2);
   int c1 = GetChar(s1, 0);
   int c2 = GetChar(s2, 0);
   if (c1 == c2)
      return false;
   return true;
}

Function int Power (int num, int pwr)
{
   int n = num;
   if (pwr == 0)
      return 1;
   for (int i = 1; i < pwr; i++)
      num *= n;
   return num;
}

Function bool IsDigit (str charStr)
{
   if (StrLen(charStr) > 1)
      charStr = StrParam(c:GetChar(charStr, 0));
   str compare = "";
   for (int i = 0; i < 10; i++)
   {
      compare = StrParam(i:i);
      if (!StrICmpZan(charStr, compare))
         return true;
   }
   return false;
}

Function bool IsAlpha (str charStr)
{
   return !IsDigit(charStr);
}

Function bool GetRoundGame (int type)
{

if(Type){return (GetCvar("lastmanstanding")==1||GetCvar("teamlms"));}

return (GetCvar("lastmanstanding")==1||GetCvar("teamlms")||(GetCvar("Sv_BombGame")&&GetCvar("TeamGame")));
}